/*
MIT License

Copyright  (c) 2009-2019 easyice

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* Generated by Together */

#include "StdAfx.h"
#include "CParseSectionTogether.h"

tables::CParseSectionTogether::CParseSectionTogether()
{
	m_nAvailable = 0;

}

tables::CParseSectionTogether::~CParseSectionTogether()
{

}

void tables::CParseSectionTogether::SetData(BYTE* pData, int nLength)
{
	m_pData = pData;
}

bool tables::CParseSectionTogether::SetPacket(BYTE* pData)
{
	m_pPacket = pData;

	/* Return if no payload in the TS packet */
	if(!(pData[3] & 0x10))
	{
		return false;
	}

	/* Skip the adaptation_field if present */
	if(pData[3] & 0x20)
		m_pData = pData + 5 + pData[4];
	else
		m_pData = pData + 4;

	/* Unit start -> skip the pointer_field and a new section begins */
	if(pData[1] & 0x40)
	{
		m_pData = m_pData + *m_pData + 1;
	}

	m_nAvailable = 188 + m_pPacket - m_pData;

	//int  pointer_field = m_pPacket[4];

	//if (pointer_field == 0)
	//	m_pData = m_pPacket + 4 + 1;						//packet + ts_head + pointer_field
	//else
	//	m_pData = m_pPacket + 4 + 1 + pointer_field + 1;	//packet + ts_head + pointer_field + pointer_field_value + 1(差一)

	return m_nAvailable > 0;
}

void tables::CParseSectionTogether::GetData(vector<BYTE>& vecData)
{
	//vecData.clear();
	//vecData.resize(m_nAvailable);
	//memcpy(&vecData[0],m_pData,m_nAvailable);


	vecData.clear();
	int len = GetDataLen();
	if (len > 0)
	{
		vecData.resize(len);
		memcpy(&vecData[0],m_pData,len);
	}
}

int tables::CParseSectionTogether::GetDataLen()
{
	int len = Get_section_length() + 3; // 3 = table_id + section_length

	int len2 = m_nAvailable;
	//int len2 = 188 -4 -1 -m_pPacket[4];//最大有效数据长度

	if (len > len2)
	{
		len = len2;
	}

	return len;
}

BYTE tables::CParseSectionTogether::Get_table_id()
{
	return m_pData[0];
}

int tables::CParseSectionTogether::Get_section_length()
{
	return CBit::getBits (m_pData, 0, 12, 12);
}

BYTE tables::CParseSectionTogether::Get_section_number()
{
	return CBit::getBits (m_pData, 0, 48, 8);;
}

BYTE tables::CParseSectionTogether::Get_last_section_number()
{
	return CBit::getBits (m_pData, 0, 56, 8);;
}

