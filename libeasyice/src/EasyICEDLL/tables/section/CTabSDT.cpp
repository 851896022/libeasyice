/*
MIT License

Copyright  (c) 2009-2019 easyice

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* Generated by Together */

#include "StdAfx.h"
#include "CTabSDT.h"

tables::CTabSDT::~CTabSDT()
{

}

tables::CTabSDT::CTabSDT()
{

}

void tables::CTabSDT::Parse(const SECTION& section, TABLES* tables)
{

}

void tables::CTabSDT::Parse(const TABLE_SECTIONS& table_sections, TABLES* tables)
{
	STU_SECTION_SDT tabSDT;

	TABLE_SECTIONS::const_iterator it;

	for (it = table_sections.begin(); it != table_sections.end(); it++)
	{
		ParseSection(it->vecData,tabSDT);
	}

	if (tabSDT.empty())
	{
		return;
	}

	bool bfinded_tableid = false;
	vector<STU_SECTION_SDT>::iterator it_tab = tables->vecTabSDT.begin();
	for (; it_tab != tables->vecTabSDT.end(); ++it_tab)
	{
		if (it_tab->empty())
		{
			continue;
		}
		if (it_tab->begin()->table_id != tabSDT.begin()->table_id)
		{
			continue;
		}

		bfinded_tableid = true;

		bool b_section_num_exist = false;
		bool b_version_num_exist = false;
		bool b_transport_stream_id_exist = false;
		bool b_original_network_id_exist = false;

		STU_SECTION_SDT::iterator it_sec = it_tab->begin();

		for (; it_sec != it_tab->end(); ++it_sec)
		{
			if (it_sec->transport_stream_id ==  tabSDT.begin()->transport_stream_id)
			{
				b_transport_stream_id_exist = true;
				if (it_sec->section_number == tabSDT.begin()->section_number)
				{
					b_section_num_exist = true;
				}
			}

			if (it_sec->original_network_id ==  tabSDT.begin()->original_network_id)
			{
				b_original_network_id_exist = true;
				if (it_sec->section_number == tabSDT.begin()->section_number)
				{
					b_section_num_exist = true;
				}
			}

			
			if (it_sec->version_number == tabSDT.begin()->version_number)
			{
				b_version_num_exist = true;;
			}
		}
		
		//如果需要处理不同版本号打开注释。暂不处理版本号
		if ((it_tab->begin()->table_id == tabSDT.begin()->table_id )&& ( !b_section_num_exist ||!b_transport_stream_id_exist ||!b_original_network_id_exist /*|| !b_version_num_exist*/ ))
		{
			
			it_tab->push_back(tabSDT.front());
			DecodeDescriptors(it_tab->back());
			return;
		}
	
	}

	if (!bfinded_tableid)
	{
		
		tables->vecTabSDT.push_back(tabSDT);
		DecodeDescriptors(tables->vecTabSDT.back().back());
	}

}

void tables::CTabSDT::ParseSection(const vector<BYTE>& vecData,STU_SECTION_SDT& tabSDT)
{
	SDT      s;
	SDT_LIST s2;
	int      len1,len2;
	u_char* b = (u_char*)&vecData[0];

	s.table_id 			 = b[0];
	s.section_syntax_indicator	 = CBit::getBits (b, 0, 8, 1);
	s.reserved_1 			 = CBit::getBits (b, 0, 9, 1);
	s.reserved_2 			 = CBit::getBits (b, 0, 10, 2);
	s.section_length		 = CBit::getBits (b, 0, 12, 12);
	s.transport_stream_id		 = CBit::getBits (b, 0, 24, 16);
	s.reserved_3 			 = CBit::getBits (b, 0, 40, 2);
	s.version_number 		 = CBit::getBits (b, 0, 42, 5);
	s.current_next_indicator	 = CBit::getBits (b, 0, 47, 1);
	s.section_number 		 = CBit::getBits (b, 0, 48, 8);
	s.last_section_number 		 = CBit::getBits (b, 0, 56, 8);
	s.original_network_id		 = CBit::getBits (b, 0, 64, 16);
	s.reserved_4 			 = CBit::getBits (b, 0, 80, 8);

	if (s.table_id != 0x42 && s.table_id != 0x46)
	{
		return;
	}

	//  len = len - header - CRC
	len1 = s.section_length - 11 - 4;
	b   += 11;

	while (len1 > 0 )
	{

		s2.service_id		= CBit::getBits (b, 0,  0, 16);
		s2.reserved_1		= CBit::getBits (b, 0, 16, 6);
		s2.EIT_schedule_flag		= CBit::getBits (b, 0, 22, 1);
		s2.EIT_present_following_flag= CBit::getBits (b, 0, 23, 1);
		s2.running_status		= CBit::getBits (b, 0, 24, 3);
		s2.free_CA_mode		= CBit::getBits (b, 0, 27, 1);
		s2.descriptors_loop_length	= CBit::getBits (b, 0, 28, 12);

		b    += 5;
		len1 -= 5;
		len2  = s2.descriptors_loop_length;

		//s2.descriptors = CDescriptor::GetInstancePtr()->DecodeDescriptor(b,len2);
		if (len2 > 0)
		{
			s2.vec_descriptor.resize(len2);
			memcpy(&s2.vec_descriptor[0],b,len2);
		}
		while (len2 > 0)
		{
			int x = 1;

			//x = descriptor (b, DVB_SI);
			//s2.vec_descriptor.push_back(*b);
			len2 -= x;
			b    += x;
			len1 -= x;
		}

		s.vec_sdt_list.push_back(s2);

	}// while len1

	s.CRC = CBit::getBits (b,0,0,32);

	tabSDT.push_back(s);
}

//void tables::CTabSDT::DecodeDescriptors(STU_SECTION_SDT& tabSDT)
//{
//	if (tabSDT.empty())
//	{
//		return;
//	}
//
//	vector<SDT_LIST>::iterator it = tabSDT.begin()->vec_sdt_list.begin();
//	for (; it != tabSDT.begin()->vec_sdt_list.end(); ++it)
//	{
//		if (!it->vec_descriptor.empty())
//		{
//			CDescriptor::GetInstancePtr()->DecodeDescriptor(it->descriptors,&it->vec_descriptor[0],(int)it->vec_descriptor.size());
//		}
//	}
//}

void tables::CTabSDT::DecodeDescriptors(SDT& sdt)
{
	vector<SDT_LIST>::iterator it = sdt.vec_sdt_list.begin();
	for (; it != sdt.vec_sdt_list.end(); ++it)
	{
		if (!it->vec_descriptor.empty())
		{
			CDescriptor::GetInstancePtr()->DecodeDescriptor(it->descriptors,&it->vec_descriptor[0],(int)it->vec_descriptor.size());
		}
	}
}
