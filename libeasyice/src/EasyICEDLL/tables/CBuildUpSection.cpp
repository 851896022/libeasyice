/*
MIT License

Copyright  (c) 2009-2019 easyice

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* Generated by Together */

#include "commondefs.h"
#include "CBuildUpSection.h"

tables::CBuildUpSection::CBuildUpSection()
{

}

tables::CBuildUpSection::~CBuildUpSection()
{

}

void tables::CBuildUpSection::AddPacket(BYTE* pPacket, int nLength)
{

	CTsPacket tsPacket;
	if (!tsPacket.SetPacket(pPacket))
	{
		return; //sync byte error
	}
	int pid = tsPacket.Get_PID();
	SECTION_BUFFER::iterator it = m_pmapSectionData->find(pid);
	if (it == m_pmapSectionData->end())	//没有找到，插入新项
	{
		if ( !tsPacket.Get_payload_unit_start_indicator() )
		{
			return;
		}
		OnNotFindPid(pPacket,pid);
	}
	else	//找到了
	{
		OnFindedPid(pPacket,pid);
	}
	
}

void tables::CBuildUpSection::AnalyzeTable(int table_id, const TABLE_SECTIONS& table_sections)
{

	//table_sections中只有一个
	m_analyzer.AnalyzeTable(table_id,table_sections,m_pTables);
}

void tables::CBuildUpSection::SetSectionBuffer(SECTION_BUFFER* p)
{
	m_pmapSectionData = p;
}

void tables::CBuildUpSection::SetTablesBuffer(TABLES* p)
{
	m_pTables = p;
}

void tables::CBuildUpSection::OnNotFindPid(BYTE* pPacket,int pid)
{
	//插入新项
	PID_SECTION_BUILDING pid_section_buiding;
	TABLE_ID_SECTION table_id_section;
	TABLE_SECTIONS section_data;
	CParseSectionTogether tsTableHead;
	SECTION section;
	if (!tsTableHead.SetPacket(pPacket))
	{
		 return;
	}
	table_id_section.table_id = tsTableHead.Get_table_id();
	section.section_length = tsTableHead.Get_section_length();
	tsTableHead.GetData(section.vecData);
	table_id_section.sections.push_back(section);

	CheckTable(pPacket,table_id_section);
	pid_section_buiding.pid_sections.push_back(table_id_section);
	m_pmapSectionData->insert(SECTION_BUFFER::value_type(pid,pid_section_buiding));

}

void tables::CBuildUpSection::OnFindedPid(BYTE* pPacket,int pid)
{
	CTsPacket tsPacket;
	CParseSectionTogether tsTableHead;
	tsPacket.SetPacket(pPacket);
	if (!tsTableHead.SetPacket(pPacket))
	{
		return;
	}
	
	PID_SECTION_BUILDING& cur_pid_section_building = (*m_pmapSectionData)[pid];

	if (tsPacket.Get_payload_unit_start_indicator())
	{
		//一个新表的开始或新section的开始，判断现有数据是否已经含有此表,是否组完
		int table_id = tsTableHead.Get_table_id();
		PID_SECTIONS::iterator it;
		bool bFinded = false;
		int idx = 0;
		for(it = cur_pid_section_building.pid_sections.begin(); it != cur_pid_section_building.pid_sections.end(); it++)
		{
			if (table_id == it->table_id)
			{
				bFinded = true;
				////////////////////////////////////////////////
				if ( !it->bFinish )
				{
					AddDataToSections(pPacket,it->sections);
					cur_pid_section_building.curSectionIdx = idx;
					CheckTable(pPacket,*it);
				}
				///////////////////////////////////////////////
				//if ( !it->bFinish )
				//{
				//	//没有组完，继续组.添加一个新的section
				//	AddDataToSections(pPacket,it->sections);
				//	cur_pid_section_building.curSectionIdx = idx;
				//	CheckTable(pPacket,*it);
				//}
				//else
				//{
				//	//在这里处理，同一PID包含了很多PMT表的情况。或者，表的版本号有更新
				//	//break;
				//}
			}
			++idx;
		}
		if ( !bFinded )	//没有找到table_id
		{
			//添加新的
			AddNewTable(pPacket,cur_pid_section_building);
			CheckTable(pPacket,cur_pid_section_building.pid_sections[cur_pid_section_building.curSectionIdx]);
			//CheckTable(pPacket,(cur_pid_section_building.pid_sections[cur_pid_section_building.pid_sections.size() -1]);
		}
	
	}
	else
	{
		//在最后一个表组section

		if (AddDataToSections(pPacket,cur_pid_section_building.get_cur_table_id_section()->sections) != -1)
		{
			CheckTable(pPacket,*cur_pid_section_building.get_cur_table_id_section());
		}
	}
}

int tables::CBuildUpSection::AddDataToSections(BYTE* pPacket,TABLE_SECTIONS& sections)
{
	CTsPacket tsPacket;
	tsPacket.SetPacket(pPacket);
	if (tsPacket.Get_payload_unit_start_indicator())
	{
		//添加一个新的section
		CParseSectionTogether tsTableHead;
		if (!tsTableHead.SetPacket(pPacket))
		{
			return 0;
		}
		SECTION section;
		section.section_length = tsTableHead.Get_section_length();
		tsTableHead.GetData(section.vecData);
		sections.push_back(section);
	}
	else
	{
		//在最后一个section追加
		//if (sections[sections.size() -1].section_length + 3 == sections[sections.size() -1].vecData.size())
		//{
		//	return -1;	//section已经是完整的
		//}

		if (sections.empty())
		{
			return -1;
		}

		CParseSectionTogether tsTableHead;
		if (!tsTableHead.SetPacket(pPacket))
		{
			return 0;
		}
		int need =  sections[sections.size() -1].section_length + 3 - sections[sections.size() -1].vecData.size();
		if (need > tsTableHead.m_nAvailable)
		{
			need = tsTableHead.m_nAvailable;
		}
		Vec_P_Copy(sections[sections.size() -1].vecData,tsTableHead.m_pData, need);

		//int len =  sections[sections.size() -1].section_length + 3 - sections[sections.size() -1].vecData.size();
		//if (len > 184)
		//{
		//	len = 184;
		//}
		//Vec_P_Copy(sections[sections.size() -1].vecData,pPacket+4, len);
	}
	return 0;
}

void tables::CBuildUpSection::Vec_P_Copy(vector<BYTE>& vecData,BYTE* pData,int nLength)
{
	if (nLength <=0)
	{
		return;
	}
	
	int size = (int) vecData.size();
	vecData.resize(size + nLength);
	memcpy(&vecData[size],pData,nLength);
}

void tables::CBuildUpSection::AddNewTable(BYTE* pPacket,PID_SECTION_BUILDING& pid_section_building)
{
	CParseSectionTogether tsTableHead;
	if (!tsTableHead.SetPacket(pPacket))
	{
		return;
	}
	TABLE_ID_SECTION table_id_section;

	table_id_section.table_id = tsTableHead.Get_table_id();
	SECTION section;
	section.section_length = tsTableHead.Get_section_length();
	tsTableHead.GetData(section.vecData);
	table_id_section.sections.push_back(section);
	/*if (section.section_length == section.vecData.size())
	{
		if (tsTableHead.Get_last_section_number() == tsTableHead.Get_section_number())
		{
			table_id_section.bFinish = true;
		}
	}*/
	
	pid_section_building.pid_sections.push_back(table_id_section);
	pid_section_building.curSectionIdx = pid_section_building.pid_sections.size()-1;

}

void tables::CBuildUpSection::CheckTable(BYTE* pPacket,TABLE_ID_SECTION& table_id_section)
{
	TABLE_SECTIONS::const_iterator it = table_id_section.sections.begin();
	for (; it != table_id_section.sections.end(); ++it)
	{
		if (it->vecData.size() < it->section_length+3 )
		{
			return;
		}
	}

	AnalyzeTable(table_id_section.table_id,table_id_section.sections);	//解析
	table_id_section.sections.clear();

	
	//check finish 
	if (table_id_section.table_id == 0x70 || table_id_section.table_id == 0x71 || table_id_section.table_id == 0x72 
		|| table_id_section.table_id == 0x73 || table_id_section.table_id == 0x7E)
	{
		//不用组section 的：TDT RST ST TOT--------and so DIT 
		table_id_section.bFinish = true;
	}

	//只要不是EIT，收到了最后一个section既认为finish
	if (table_id_section.table_id== 0x4E || table_id_section.table_id == 0x4F
		|| (table_id_section.table_id >= 0x50 && table_id_section.table_id <= 0x5F)
		|| (table_id_section.table_id >= 0x60 && table_id_section.table_id <= 0x6F) )
	{
		//eit
		//table_id_section.bFinish = true;
	}
	else
	{
		CParseSectionTogether tsTableHead;
		if (!tsTableHead.SetPacket(pPacket))
		{
			return;
		}
		if (tsTableHead.Get_last_section_number() == tsTableHead.Get_section_number())
		{
			//会导致section顺序为1，2，0的情况下丢失section0，因而注释掉下面，解析后续所有section，对效率影响不严重
			//table_id_section.bFinish = true;
		}
	}

	//


	return;




	if (table_id_section.sections[table_id_section.sections.size() -1].section_length+3 == table_id_section.sections[table_id_section.sections.size() -1].vecData.size())
	{
		CParseSectionTogether tsTableHead;
		if (!tsTableHead.SetPacket(pPacket))
		{
			return;
		}
		int table_id = tsTableHead.Get_table_id();
		if (table_id == 0x70 || table_id == 0x71 || table_id == 0x72 || table_id == 0x73)
		{
			//不用组section 的：TDT RST ST TOT--------and so DIT 
			table_id_section.bFinish = true;
			AnalyzeTable(table_id_section.table_id,table_id_section.sections);	//解析
		}
		else if ( tsTableHead.Get_last_section_number() == tsTableHead.Get_section_number() )
		{
			table_id_section.bFinish = true;
			AnalyzeTable(table_id_section.table_id,table_id_section.sections);	//解析
			
		}
	}

}

//bool  tables::CBuildUpSection::is_table_sections_completed(TABLE_ID_SECTION& table_id_section)
//{
//
//}

